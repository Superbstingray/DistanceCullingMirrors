
using UnityEngine;
using VRC.SDKBase;
using VRC.SDK3.Components;
using UdonSharp;

namespace superbstingray
{
	[UdonBehaviourSyncMode(BehaviourSyncMode.NoVariableSync)]
	public class SetMirrorCullDistances : UdonSharp.UdonSharpBehaviour 
	{
		[Tooltip("A Value Of 0 Will Disable Culling Behaviour")]
		public float PlayerCullingDistance = 10F;

		[Tooltip("A Value Of 0 Will Disable Culling Behaviour")]
		public float PickupCullingDistance = 20F;

		[Tooltip("A Value Of 0 Will Disable Culling Behaviour")]
		public float OtherCullingDistances = 75F;

		[Tooltip("Set Individual Layer Culling Distances")]
		public float[] LayerCullDistances;  

		private Camera MirrorCamera;
		private GameObject MirrorCamObject;

		public void OnEnable()
		{
			this.SendCustomEventDelayedSeconds("MirrorUpdate", 0.1F, VRC.Udon.Common.Enums.EventTiming.Update);
		}
		public void MirrorUpdate()
		{
			// Find the Camera Generated by the Mirror
			MirrorCamObject = GameObject.Find(string.Format("/{0}{1}", "MirrorCam", gameObject.name));
			if (VRC.SDKBase.Utilities.IsValid(MirrorCamObject))
			{
				MirrorCamera = MirrorCamObject.GetComponent<Camera>();

				// Force Float Array to 32 Length
				if ((LayerCullDistances.Length != 32)) { LayerCullDistances = new float[32]; }

				// Update Player Layers Culling Distances 
				if ((LayerCullDistances[9] == 0F)) // Player
				{ LayerCullDistances[9] = PlayerCullingDistance;
				}
				if ((LayerCullDistances[10] == 0F)) // PlayerLocal
				{ LayerCullDistances[10] = PlayerCullingDistance;
				}
				if ((LayerCullDistances[18] == 0F)) // MirrorReflection
				{ LayerCullDistances[18] = PlayerCullingDistance;
				}
				// Update Pickup Related Layer Culling Distances
				if ((LayerCullDistances[8] == 0F)) // Interactive
				{ LayerCullDistances[8] = PickupCullingDistance;
				}
				if ((LayerCullDistances[13] == 0F)) // Pickup
				{ LayerCullDistances[13] = PickupCullingDistance;
				}
				if ((LayerCullDistances[14] == 0F)) // PickupNoEnvironment
				{ LayerCullDistances[14] = PickupCullingDistance;
				}

				// Set Undefined Layers Distances to OtherCullingDistances
				for(int i=0; i<32; i++)
					if ((LayerCullDistances[i] == 0F)) { LayerCullDistances[i] = OtherCullingDistances; }

				// Update LayerCullDistances Properties
				MirrorCamera.layerCullDistances = LayerCullDistances;
				MirrorCamera.layerCullSpherical = true;

				// Update MirrorCam Name to Prevent Naming Conflicts
				MirrorCamObject.name = string.Format("{0}{1}", MirrorCamObject.name, "DCMUpdated");

				//Log Mirror Update
				Debug.Log(string.Format("[<color=yellow>DCM</color>] [<color=orange>{0}</color>] <color=white>{1}</color>", gameObject.name, "Applying Mirror Culling Distances"));
				Debug.Log(string.Format("[<color=yellow>DCM</color>] {0} <color=lightblue>{1}m</color>", "Player Culling Distance", PlayerCullingDistance));
				Debug.Log(string.Format("[<color=yellow>DCM</color>] {0} <color=lightblue>{1}m</color>", "Pickups Culling Distance", PickupCullingDistance));
				Debug.Log(string.Format("[<color=yellow>DCM</color>] {0} <color=lightblue>{1}m</color>", "Other Culling Distances", OtherCullingDistances));

				//Disable this Behaviour Once Completed
				gameObject.GetComponent<SetMirrorCullDistances>().enabled = false;

			} else

			{	// Retry if Mirror Camera Wasn't Initialized 
				this.SendCustomEventDelayedSeconds("MirrorUpdate", 1F, VRC.Udon.Common.Enums.EventTiming.Update);
			}
		}
	} 
}
